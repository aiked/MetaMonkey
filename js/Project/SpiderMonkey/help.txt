JSObject *propertiesObj;
if( !getObjPropertyAndConvertToObj(val, "properties", &propertiesObj) )
	return JS_FALSE;

JSString *kindStr;
if( !getObjPropertyAndConvertToString(propObj, "kind", &kindStr) )
	return JS_FALSE;

JSString *kindStr;
if( !unparse_expr(keyObj, &initKeyStr, indent, 18, false) )
	return JS_FALSE;

JSString *functionStr;
if( !functionDeclaration(kindStr, &functionStr, keyVal, valueObj, indent ) )
	return JS_FALSE;

jsval idVal;
if (!JS_GetProperty(cx, val, "id", &idVal)){
	JS_ReportError(cx, "object has not property (expression)");
	return JS_FALSE;
}

JSString *declStr;
if( !declarators( declObj, &declStr, indent, false) )
	return JS_FALSE;

JSString *ifSubStmtStr;
if(!substmt(consequentObj, &ifSubStmtStr, indent, gotElse))
	return JS_FALSE;

jsval labelVal;
if (!JS_GetProperty(cx, val, "label", &labelVal))
	return JS_FALSE;

if( labelVal.isObject() ){
	JSObject *labelObj;
	if( !JS_ValueToObject(cx, labelVal, &labelObj) )
		return JS_FALSE;

if( !wrapExpr(child, cprec, 3) )
		return JS_FALSE;

JS_NewStringCopyZ(cx,"init");

*child = joinString(3, nameStr, srcStr(JSSRCNAME_COLONSPACE), bodyStr);

Vector<JSString*> children(cx);
*child = joinStringVector(&children, NULL, NULL, NULL);
--------------------------------------------------------------------------------------
e=[]; for(i=0; i<tests.length; ++i) e[i] ='"' + tests[i].replace(/(\r\n|\n|\r)/gm, '').replace(/(\")/gm, '\\"') + '"\n'; e.join()

{
    var s = indent + "try" + substmt(n.block, indent, true);
    var h = n.handlers;
    var handlers = h === null ? [] : "length" in h ? h : [h];
    
	for (var i = 0; i < handlers.length; i++) {
        var c = handlers[i];
        s += 'catch (' + expr(c.param, '####', 0, false);
        if (c.guard !== null)
            s +=  " if (" + expr(c.guard, indent, 0, false) + ")";
        var more = (n.finalizer !== null || i !== handlers.length - 1);
        s += ")" + substmt(c.body, indent, more);
    }
    if (n.finalizer)
        s += "finally" + substmt(n.finalizer, indent, false);
    return s;
}